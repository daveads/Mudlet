name: ðŸ”¨ Build Mudlet (windows)
on:
  push:
    branches: [master, development, release-*, test/linux_windows]
    tags: [Mudlet-*]
  pull_request:
  workflow_dispatch:
    inputs:
      scheduled:
        description: 'Imitate a scheduled build'
        required: false
        default: 'false'
  schedule:
    - cron: '0 2 * * *'

jobs:
  compile-mudlet:
    name: ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    #if: ${{ github.repository_owner == 'Mudlet' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            buildname: 'windows64'
          - os: windows-2019
            buildname: 'windows32'
            

    steps:
    - name: Checkout Mudlet source code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: (Windows 64) Setup MSYS2
      if: matrix.buildname == 'windows64'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true

    - name: (Windows 32) Setup MSYS2
      if: matrix.buildname == 'windows32'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        update: true

    - name: (Windows) Build Environment Setup
      shell: msys2 {0}
      env:
        GITHUB_REPO_TAG: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
      run: |
        $GITHUB_WORKSPACE/CI/setup-windows-sdk.sh
        $GITHUB_WORKSPACE/CI/validate-deployment-for-windows.sh

    - name: Restore ccache
      id: restore-ccache
      uses: actions/cache/restore@v4
      with:
        path: ${{runner.workspace}}/ccache
        key: ccache-${{matrix.os}}-${{matrix.buildname}}-${{ github.sha }}
        restore-keys: ccache-${{matrix.os}}-${{matrix.buildname}}

    - name: (Windows) Build
      shell: msys2 {0}
      env:
        GITHUB_REPO_TAG: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        GITHUB_SCHEDULED_BUILD: ${{ github.event_name == 'schedule' || github.event.inputs.scheduled == 'true' }}
        GITHUB_PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_PULL_REQUEST_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      run: $GITHUB_WORKSPACE/CI/build-mudlet-for-windows.sh

    - name: Save ccache
      if: always() && steps.restore-ccache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{runner.workspace}}/ccache
        key: ${{ steps.restore-ccache.outputs.cache-primary-key }}

    - name: (Windows) Package
      shell: msys2 {0}
      run: $GITHUB_WORKSPACE/CI/package-mudlet-for-windows.sh

    - name: Upload packaged Mudlet
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_FILENAME
      with:
        name: ${{env.UPLOAD_FILENAME}}
        path: ${{env.FOLDER_TO_UPLOAD}}


    - name: (Windows) Prep for Lua tests
      if: matrix.buildname == 'windows64' || matrix.buildname == 'windows32'
      shell: msys2 {0}
      run: |
        # Create required directories and copy files
        mkdir -p "${GITHUB_WORKSPACE}/src/release"
        cp -r "${GITHUB_WORKSPACE}/package-${MSYSTEM}-release/"* "${GITHUB_WORKSPACE}/src/release/"
        
        # Install test dependencies with specific paths
        PATH="${MINGW_BASE_DIR}/bin:$PATH"
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install busted
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install luafilesystem
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install luautf8
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install lua-zip
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install luasql-sqlite3
        luarocks --tree="${MINGW_BASE_DIR}" --lua-version 5.1 install lrexlib-pcre

    - name: (Windows) Run Lua tests
      if: matrix.buildname == 'windows64' || matrix.buildname == 'windows32'  
      shell: msys2 {0}
      timeout-minutes: 5
      run: |
        cd "${GITHUB_WORKSPACE}/src/release"
        # Create a temp directory we have access to
        mkdir -p "${GITHUB_WORKSPACE}/temp"
        
        # Set TEMP environment variable for the test run
        TEMP="${GITHUB_WORKSPACE}/temp"
        export TEMP
        TMPDIR="${GITHUB_WORKSPACE}/temp"
        export TMPDIR
        
        echo "Using temp directory: ${TEMP}"
        
        ./mudlet.exe --profile "Mudlet self-test" --mirror --no-dialog
      env:
        PATH: ${{env.MINGW_BASE_DIR}}/bin:${{env.PATH}}
        AUTORUN_BUSTED_TESTS: 'true'
        TESTS_DIRECTORY: ${{github.workspace}}/src/mudlet-lua/tests
        QUIT_MUDLET_AFTER_TESTS: 'true'

    - name: Check Lua test results
      if: matrix.buildname == 'windows64' || matrix.buildname == 'windows32'
      shell: msys2 {0}
      run: |
        if [ -e "${GITHUB_WORKSPACE}/temp/busted-tests-failed" ]; then
          echo "Lua tests failed - see the action called 'Run Lua tests' above for detailed output."
          exit 1
        fi